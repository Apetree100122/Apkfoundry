#!/bin/sh -e
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2018 Max Rees
# See LICENSE for more information.

# af-changes -p BRANCH BEFORE AFTER
# af-changes -m TARGET COMMITISH
while getopts p:mq opt; do
case "$opt" in
p) branch="$OPTARG";;
m) mr=1;;
esac
done
shift "$((OPTIND - 1))"

if [ -z "$branch" ] && [ -z "$mr" ]; then
	exit 1
fi
if [ -n "$branch" ] && [ -n "$mr" ]; then
	exit 1
fi
if [ -n "$mr" ]; then
	branch="$1"
fi

before="$1"
after="$2"
if [ -z "$before" ] || [ -z "$after" ]; then
	exit 1
fi

projectdir="${PWD##*/}"

# This is normally not needed when the merging branch is a strict
# superset of the changesets in the target branch (i.e. it was created
# based on the target branch and the target branch has had no new
# commits since then). Otherwise, we want to select only the changesets
# that the merging branch is trying to perform.
if [ -n "$mr" ]; then
	base="$(git merge-base "$before" "$after")"
	if [ -z "$base" ]; then
		printf 'af-changes: failed merge base: %s %s %s\n' \
			"$projectdir" "$before" "$after" >&2
		exit 2
	else
		printf 'af-changes: %s %s %s\n' \
			"$projectdir" "$before" "$after" >&2
	fi
	before="$base"
fi

printf 'af-changes: changed packages: %s %s %s\n' \
	"$projectdir" "$before" "$after" >&2

changes="$(git diff-tree -r --name-only --diff-filter dxu "$before..$after")"
printf '%s' "$changes" \
	| grep 'APKBUILD$' | sed 's#/APKBUILD$##' \
	| while read -r pkg; do
		printf 'af-changes: %s\n' "$pkg" >&2
		printf '%s\n' "$pkg"
	done
