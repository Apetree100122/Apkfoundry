#!/bin/sh -e
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019 Max Rees
# See LICENSE for more information.
startdir="$1"
repo="${startdir%%/*}"

cleanup() {
	case "$AF_STATUS" in
	"")
		;;
	0)
		abuild undeps clean;;
	*)
		abuild undeps;;
	esac
}

shuffle_repo() {
	local error="${1:-0}"

	arch="$(apk --print-arch)"
	for apk in $(cat "$AF_TASKDIR/manifest.txt"); do
		if ! [ -e "$REPODEST/$repo/$arch/$apk" ]; then
			if [ "$error" -eq 0 ]; then
				printf '>>> ERROR: apk does not exist: %s' "$apk"
				error=12
				shuffle_repo "$error"
				break
			else
				continue
			fi
		fi

		mv "$REPODEST/$repo/$arch/$apk" "$AF_TASKDIR/$apk"
		touch -r APKBUILD "$AF_TASKDIR/$apk"

		if [ "$error" -eq 0 ]; then
			ln -sr "$AF_TASKDIR/$apk" "$REPODEST/$repo/$arch/$apk"
			touch -hr APKBUILD "$REPODEST/$repo/$arch/$apk"
		fi
	done

	abuild index
	if [ "$1" -ne "$error" ]; then
		return "$error"
	fi
	return 0
}

cd "$startdir"

set +e
(
	. ./APKBUILD
	for i in "$source"; do
		case "$i" in
		*::http://*|*::ftp://*|*::https://*) ;;
		http://*|ftp://*|https://*) ;;
		*) touch -r APKBUILD "$i";;
		esac
	done
)
set -e

if abuild up2date 2>/dev/null; then
	printf '>>> Package is up to date'
	exit 10
fi

abuild listpkg > "$AF_TASKDIR/manifest.txt"
abuild fetch deps mkusers
trap cleanup EXIT INT TERM

if [ -x "$APORTSDIR/.apkfoundry/$AF_BRANCH/pre-build" ]; then
	"$APORTSDIR/.apkfoundry/$AF_BRANCH/pre-build"
fi

set +e
# If the pkgver/pkgrel hasn't been bumped, then it will try to
# create .apks where symlinks already exist, and those symlinks
# point to a readonly bind mount. So just remove the existing
# symlinks first.
abuild cleanpkg
(
	eval "exec $AF_ROOT_FD<&-"
	export AF_ROOT_FD=
	export ABUILD_FETCH= ADDGROUP= ADDUSER= SUDO_APK=
	export CLEANUP= ERROR_CLEANUP=
	abuild all
)
export AF_STATUS="$?"
set -e

if [ -x "$APORTSDIR/.apkfoundry/$AF_BRANCH/post-build" ]; then
	"$APORTSDIR/.apkfoundry/$AF_BRANCH/post-build"
fi

shuffle_repo "$AF_STATUS"

if [ "$AF_STATUS" -eq 0 ]; then
	exit 0
else
	exit 11
fi
