#!/bin/sh -e
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019 Max Rees
# See LICENSE for more information.
scriptdir="${0%/*}"
. "$scriptdir/common"
required_commands abuild-gzsplit abuild-sign mktemp openssl
. /usr/share/abuild/functions.sh

msg() {
	[ -n "$quiet" ] && return 0
	local prompt="$GREEN>>>${NORMAL}"
	local fake="${FAKEROOTKEY:+${BLUE}*${NORMAL}}"
	local name="${STRONG}${apkbase}${NORMAL}"
	printf "${prompt} ${name}${fake}: %s\n" "$1" >&2
}

warning() {
	local prompt="${YELLOW}>>> WARNING:${NORMAL}"
	local fake="${FAKEROOTKEY:+${BLUE}*${NORMAL}}"
	local name="${STRONG}${apkbase}${NORMAL}"
	printf "${prompt} ${name}${fake}: %s\n" "$1" >&2
}

error() {
	local prompt="${RED}>>> ERROR:${NORMAL}"
	local fake="${FAKEROOTKEY:+${BLUE}*${NORMAL}}"
	local name="${STRONG}${apkbase}${NORMAL}"
	printf "${prompt} ${name}${fake}: %s\n" "$1" >&2
}

usage() {
	cat <<-EOF
		usage: ${0##*/} [options] APK [APK ...]

		Options:
		 -i      Re-sign APKs in-place
		 -k KEY  The private key to use for signing
		 -n      Update packager name
		 -p KEY  The name of the key to be used in /etc/apk/keys
		 -q      Quiet
		 -h      Show this help and exit
EOF
}

privkey="$PACKAGER_PRIVKEY"
pubkey="$PACKAGER_PUBKEY"

while getopts ik:np:qh opt; do
	case "$opt" in
	i)
		inplace=1;;
	k)
		privkey="$OPTARG";;
	n)
		packager=1;;
	p)
		pubkey="$OPTARG";;
	q)
		quiet=1;;
	*)
		usage
		[ "$opt" = "h" ] && exit 0
		exit 1
	esac
done
shift $((OPTIND - 1))

if [ -z "$*" ]; then
	usage
	exit 1
fi

if [ -z "$privkey" ]; then
	abuild-sign --installed
fi

pubkey="${pubkey:-"${privkey}.pub"}"
keyname="${pubkey##*/}"
sig=".SIGN.RSA.$keyname"

if [ -z "$FAKEROOTKEY" ]; then
	warning 'Without fakeroot, your username/group will be leaked'
fi

startpwd="$PWD"
cleanup() {
	cd "$startpwd"
  rm -rf "$tmp"
}
trap cleanup EXIT

for apk in "$@"; do
	case "$apk" in
	/*) ;;
	*) apk="$PWD/$apk";;
	esac
	apkbase="${apk##*/}"

	tmp="$(mktemp -d af-resign.XXXXXX)"

	msg 'Splitting .apk...'
	cd "$tmp"
	abuild-gzsplit < "$apk"

	if [ -n "$packager" ]; then
		msg 'Updating control.tar.gz'
		tar -xf control.tar.gz
		sed -i -e "s#^packager = .*#packager = ${PACKAGER:-"Unknown"}#" \
			.PKGINFO
		tar --format pax -f - -c $(tar -tf control.tar.gz) \
			| abuild-tar --cut \
			| gzip -9 > control.tar.gz
	fi

	sig_files="$(tar -tf signatures.tar.gz)"

  abuild-sign -k "$privkey" -p "$pubkey" -q control.tar.gz

	msg 'Current signatures:'
	printf '%s\n' "$sig_files" | sed 's/^/\t/' >&2
	msg 'New signatures:'
	printf '\t%s\n' "$sig"

	[ -n "$inplace" ] && msg 'Updating apk' || msg 'Creating apk.new'
	[ -n "$inplace" ] || apk="$apk.new"

  cat control.tar.gz data.tar.gz > "$apk"
	cleanup
done
