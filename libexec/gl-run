#!/usr/bin/env python3
# vi:et
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2020 Max Rees
# See LICENSE for more information.
import base64     # b64decode
import logging    # info, error
import os         # environ
import shutil     # copy2, rmtree
import subprocess # check_output
import sys        # argv, exit
import tempfile   # NamedTemporaryFile
from pathlib import Path

import apkfoundry           # LOCALSTATEDIR, MOUNTS, SYSCONFDIR, init_logger,
                            # site_conf
import apkfoundry._util     # check_call
import apkfoundry.build     # buildrepo
import apkfoundry.container # Container
import apkfoundry.socket    # client_init

FAKE_BEFORE = "0000000000000000000000000000000000000000"

SETARCH = apkfoundry.site_conf("setarch")
os.environ["USE_COLORS"] = "force"

apkfoundry.init_logger(None, color=True, sections=True)

class CI_Env: # pylint: disable=too-many-instance-attributes
    prefix = "CUSTOM_ENV_"
    __slots__ = (
        "after",
        "aportsdir",
        "arch",
        "before",
        "cdir",
        "project",
        "ref",
        "tmp",

        "mr",
        "target_url",

        "cache",
        "srcdest",
    )

    def __init__(self):
        self.after = self["CI_COMMIT_SHA"]
        self.aportsdir = Path(self["CI_PROJECT_DIR"])
        self.arch = self["AF_ARCH"]
        self.before = self["CI_COMMIT_BEFORE_SHA"]
        self.cdir = Path(self["CI_BUILDS_DIR"])
        self.project = self["CI_PROJECT_PATH_SLUG"]
        self.ref = self["CI_COMMIT_REF_NAME"]
        self.tmp = Path(self["CI_PROJECT_DIR"] + ".tmp")

        if "CI_MERGE_REQUEST_ID" in self:
            self.mr = self["CI_MERGE_REQUEST_ID"]
            self.target_url = self["CI_MERGE_REQUEST_PROJECT_URL"]
            self.ref = self["CI_MERGE_REQUEST_TARGET_BRANCH_NAME"]
        else:
            self.mr = None
            self.target_url = None

        self.cache = apkfoundry.LOCALSTATEDIR / "apk-cache" / \
            f"{self['CI_PROJECT_PATH_SLUG']}.{self.ref}.{self.arch}"

        self.srcdest = apkfoundry.LOCALSTATEDIR / "src-cache" / \
            f"{self['CI_PROJECT_PATH_SLUG']}"

    def __getitem__(self, key):
        return os.environ[self.prefix + key]

    def __setitem__(self, key, value):
        os.environ[self.prefix + key] = value

    def __delitem__(self, key):
        del os.environ[self.prefix + key]

    def __iter__(self):
        return [i for i in os.environ if i.startswith(self.prefix)]

    def __contains__(self, item):
        return self.prefix + item in os.environ

def sanitize_script(script):
    apkfoundry._util.check_call((
        "sed", "-i",
        "-e", f"s@{env.cdir}[/]*@/@g",
        "-e", "/AF_PRIVKEY/d",
        "-e", "/AF_PRIVKEY_B64/d",
        "-e", "/AF_PUBKEY/d",
        script,
    ))

def get_keys():
    if "AF_PRIVKEY_B64" in env and "AF_PUBKEY" in env:
        privkey = env["AF_PRIVKEY_B64"].strip()
        privkey = base64.b64decode(privkey)
        pubkey = env["AF_PUBKEY"].strip()

        return privkey, pubkey

    if "AF_PRIVKEY" in env:
        privkey = env["AF_PRIVKEY"].strip()
        if "/" in privkey:
            logging.error("AF_PRIVKEY cannot contain slashes")
            return None, None

        privkey = Path(apkfoundry.SYSCONFDIR / "keys" / env.project / privkey)
        if not privkey.is_file():
            logging.error("AF_PRIVKEY does not exist on this builder")
            return None, None

        pubkey = env["AF_PUBKEY"].strip() if "AF_PUBKEY" in env \
            else privkey.name + ".pub"
        privkey = privkey.read_bytes()

        return privkey, pubkey

    return None, None

def get_sources(script, env):
    apkfoundry._util.check_call((script,))

    apkfoundry._util.check_call((
        "git", "-C", env.aportsdir,
        "worktree", "add", ".apkfoundry", "apkfoundry",
    ))

    if env.mr:
        apkfoundry._util.check_call((
            "git", "-C", env.aportsdir,
            "fetch", env.target_url,
            f"+refs/heads/{env.ref}:refs/heads/{env.ref}",
        ))

    return 0

def build_script(script, env, privkey, pubkey):
    os.chdir(env.aportsdir)

    shutil.copy2(script, env.cdir / "af/build-script.alt")
    sanitize_script(env.cdir / "af/build-script.alt")
    try:
        shutil.rmtree(env.tmp)
    except FileNotFoundError:
        pass
    env.tmp.symlink_to("/tmp")

    if env.mr:
        env.before = subprocess.check_output(
            ("git", "merge-base", env.ref, env.after),
            encoding="utf-8",
        )
        if not env.before or env.before == env.after:
            logging.error("Could not merge %s into %s", env.after, env.ref)
            return 1

    manual_pkgs = []
    if "AF_PACKAGES" in env and env["AF_PACKAGES"].strip():
        manual_pkgs = [i.strip() for i in env["AF_PACKAGES"].split()]

    if env.before == FAKE_BEFORE:
        if manual_pkgs:
            logging.info("Manual job detected, ignoring revision range")
        else:
            logging.error("New branch detected, ignoring revision range")
        rev_range = None
    else:
        rev_range = " ".join((env.before, env.after))

    (env.aportsdir / ".gl-repos").symlink_to("../repos")

    args = [
        "--directory", env.cdir,
        "--aportsdir", env.aportsdir,
        "--branch", env.ref,
        "--cache", env.cache,
        "--delete", "never",
        "--srcdest", env.srcdest,
    ]

    if rev_range:
        args += ["--rev-range", rev_range]

    if privkey and pubkey:
        args += ["--key", privkey, "--pubkey", pubkey]

    if env.arch:
        args += ["--arch", env.arch]
    setarch = SETARCH.get(env.arch, None)
    if setarch:
        args += ["--setarch", setarch]

    args += [
        "--",
        env.cdir / apkfoundry.MOUNTS["repodest"].lstrip("/"),
    ]
    args += manual_pkgs

    args = [str(i) for i in args]
    rc = apkfoundry.build.buildrepo(args)
    (env.cdir / "af/rc").write_text(str(rc))
    env.tmp.unlink()
    return rc

def after_script(script, env):
    shutil.copy2(script, env.cdir / "af/after-script")
    sanitize_script(env.cdir / "af/after-script")

    rc, conn = apkfoundry.socket.client_init(env.cdir)
    if rc != 0:
        logging.error("Failed to connect to rootd")
        return rc

    cont = apkfoundry.container.Container(env.cdir, rootd_conn=conn)
    return cont.run(["/af/after-script"])[0]

env = CI_Env()
script = sys.argv[1]
stage = sys.argv[2]

if stage == "get_sources":
    rc = get_sources(script, env)
elif stage == "build_script":
    privkey, pubkey = get_keys()
    with tempfile.NamedTemporaryFile() as f:
        f.write(privkey)
        f.flush()
        rc = build_script(script, env, f.name, pubkey)
elif stage == "after_script":
    if (env.cdir / "af/info").is_dir():
        rc = after_script(script, env)
    else:
        logging.error("Container was not created, skipping after_script")
        rc = 1
else:
    apkfoundry._util.check_call((script,))
    rc = 0

sys.exit(rc)
