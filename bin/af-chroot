#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019 Max Rees
# See LICENSE for more information.
import argparse # ArgumentParser, REMAINDER
import logging  # basicConfig
import sys      # exit
from pathlib import Path

from apkfoundry.container import Container
from apkfoundry.socket import client_init

def _container_run(opts, rootd_conn=None):
    cont = Container(
        opts.cdir,
        rootd_conn=rootd_conn,
    )

    return cont.run(
        opts.argv,
        net=opts.networking,
        repo=opts.repo,
        ro_aports=opts.ro_aports,
        ro_root=opts.ro_root,
        setsid=opts.setsid,
    )

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
)

opts = argparse.ArgumentParser(
    usage="af-chroot [options...] DIR REPO COMMAND...",
)
opts.add_argument(
    "-n", "--networking", action="store_true",
    help="Enable network access",
)
opts.add_argument(
    "--no-rootd", dest="rootd", action="store_false",
    help="Do not attempt to connect to rootd",
)
opts.add_argument(
    "--rw-root", dest="ro_root", action="store_false",
    help="Mount container root as read/write",
)
opts.add_argument(
    "--rw-aports", dest="ro_aports", action="store_false",
    help="Mount APORTSDIR as read/write",
)
opts.add_argument(
    "--new-session", dest="setsid", action="store_true",
    help="Start a new session for the container",
)
opts.add_argument(
    "cdir", metavar="DIR",
    help="Container directory",
)
opts.add_argument(
    "repo", metavar="REPO",
    help="Repository for this container session",
)
opts.add_argument(
    "argv", metavar="COMMAND", nargs=argparse.REMAINDER,
    help="Command to execute",
)
opts = opts.parse_args()
opts.cdir = Path(opts.cdir).resolve(strict=False)

if opts.rootd:
    rc, conn = client_init(opts.cdir)
    if rc != 0:
        sys.exit(rc)
else:
    conn = None

rc, _ = _container_run(opts, conn)
sys.exit(rc)
