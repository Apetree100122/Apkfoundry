#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019-2020 Max Rees
# See LICENSE for more information.
import argparse # ArgumentParser, REMAINDER
import logging  # basicConfig
import sys      # exit
from pathlib import Path

import apkfoundry.container # Container
import apkfoundry.socket    # client_init

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
)

opts = argparse.ArgumentParser(
    usage="af-chroot [options ...] DIR REPO COMMAND ...",
)
opts.add_argument(
    "-n", "--networking", action="store_true",
    help="enable network access",
)
opts.add_argument(
    "--root", dest="root", action="store_true",
    help="enter container as root",
)
opts.add_argument(
    "--no-rootd", dest="rootd", action="store_false",
    help="do not attempt to connect to rootd",
)
opts.add_argument(
    "--rw-root", dest="ro_root", action="store_false",
    help="mount container root as read/write",
)
opts.add_argument(
    "--rw-aports", dest="ro_aports", action="store_false",
    help="mount APORTSDIR as read/write",
)
opts.add_argument(
    "--new-session", dest="setsid", action="store_true",
    help="start a new session for the container",
)
opts.add_argument(
    "cdir", metavar="DIR",
    help="container directory",
)
opts.add_argument(
    "repo", metavar="REPO",
    help="repository for this container session",
)
opts.add_argument(
    "argv", metavar="COMMAND", nargs=argparse.REMAINDER,
    help="command to execute",
)
opts = opts.parse_args()
opts.cdir = Path(opts.cdir).resolve(strict=False)

if opts.rootd:
    rc, conn = apkfoundry.socket.client_init(opts.cdir)
    if rc != 0:
        sys.exit(rc)
else:
    conn = None

cont = apkfoundry.container.Container(
    opts.cdir,
    rootd_conn=conn,
)

rc, _ = cont.run(
    opts.argv,
    root=opts.root,
    net=opts.networking,
    repo=opts.repo,
    ro_aports=opts.ro_aports,
    ro_root=opts.ro_root,
    setsid=opts.setsid,
)

sys.exit(rc)
