#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019 Max Rees
# See LICENSE for more information.
import argparse # ArgumentParser, REMAINDER
import logging  # basicConfig
import sys      # exit

from apkfoundry.chroot import chroot, ChrootDelete
from apkfoundry.root import client_init

def _chroot(opts, root_fd=None):
    return chroot(
        opts.argv,
        opts.cdir,
        aportsdir=opts.aportsdir,
        net=opts.networking,
        ro_git=opts.ro_aports,
        ro_root=opts.ro_root,
        root_fd=root_fd,
    )

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
)

opts = argparse.ArgumentParser(
    usage="af-chroot [options...] DIR COMMAND...",
)
opts.add_argument(
    "-a", "--aportsdir", metavar="APORTSDIR",
    help="Project checkout directory (default: container root /af/git)",
)
opts.add_argument(
    "-d", "--delete", metavar="WHEN",
    choices=[i.name for i in ChrootDelete],
    default=ChrootDelete.NEVER,
    help="When to delete the container (" \
        + ", ".join([i.name for i in ChrootDelete]) \
        + "; default NEVER)",
)
opts.add_argument(
    "-n", "--networking", action="store_true",
    help="Enable network access",
)
opts.add_argument(
    "--no-rootd", dest="rootd", action="store_false",
    help="Do not attempt to connect to rootd",
)
opts.add_argument(
    "--rw-root", dest="ro_root", action="store_false",
    help="Mount container root as read/write",
)
opts.add_argument(
    "--rw-aports", dest="ro_aports", action="store_false",
    help="Mount APORTSDIR as read/write",
)
opts.add_argument(
    "cdir", metavar="DIR", nargs=1,
    help="Container directory",
)
opts.add_argument(
    "argv", metavar="COMMAND", nargs=argparse.REMAINDER,
    help="Command to execute",
)
opts = opts.parse_args()
opts.cdir = opts.cdir[0]

if opts.rootd:
    with client_init(opts.cdir, opts.aportsdir) as sock:
        ret, _ = _chroot(opts, sock.fileno())
else:
    ret, _ = _chroot(opts)

sys.exit(ret)
