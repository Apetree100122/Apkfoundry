#!/usr/bin/env python3
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2019 Max Rees
# See LICENSE for more information.
import argparse # ArgumentParser, FileType, REMAINDER
import logging  # basicConfig
import sys      # exit

from apkfoundry.container import Container
from apkfoundry.digraph import generate_graph

def print_list(startdirs, func, sep):
    for startdir in startdirs:
        for i in func(startdir):
            print(f"{startdir} {sep} {i}")

def print_graph(startdirs, graph, dot=False):
    if dot:
        print("digraph \"af-depgraph\" {")
        print("  rankdir=LR")

    for dep, rdeps in graph.graph.items():
        for rdep in rdeps:
            if not startdirs or rdep in startdirs:
                if dot:
                    print(f"  \"{rdep}\" -> \"{dep}\"")
                else:
                    print(f"{rdep} -> {dep}")
            elif dep in startdirs:
                if dot:
                    print(f"  \"{rdep}\" -> \"{dep}\"")
                else:
                    print(f"{dep} <- {rdep}")

    if dot:
        print("}")

def tsort(opts, graph):
    order = graph.topological_sort()
    if opts.startdirs:
        order = [i for i in order if i in opts.startdirs]
    print("\n".join(order))

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s %(message)s",
)

opts = argparse.ArgumentParser(
    usage="af-depgraph [options...] [STARTDIR...]",
)
opts.add_argument(
    "-q", "--quiet", action="store_true",
    help="Just check for cycles and exit",
)
opts.add_argument(
    "-c", "--chroot",
    help="Chroot to CHROOT first",
)
opts.add_argument(
    "-g", "--graphviz", action="store_true",
    help="Print DOT output for Graphviz",
)
opts.add_argument(
    "-i", "--ignore-deps", metavar="FILE",
    type=argparse.FileType("r", encoding="utf-8"),
    help="Read ignored dependencies from FILE",
)
opts.add_argument(
    "-s", "--skip-check", action="store_true",
    help="Do not consider $checkdepends",
)
opts.add_argument(
    "-d", "--deps", action="store_true",
    help="Print the dependencies of each STARTDIR",
)
opts.add_argument(
    "-r", "--rdeps", action="store_true",
    help="Print the reverse dependencies of each STARTDIR",
)
opts.add_argument(
    "-R", "--all-rdeps", action="store_true",
    help="Print all packages which ultimately depend on each STARTDIR",
)
opts.add_argument(
    "-o", "--build-order", action="store_true",
    help="""
Consider STARTDIRs as a list of packages to build
and output the topological sort build order""",
)
opts.add_argument(
    "--no-deps", action="store_true",
    help="Print packages with no dependencies",
)
opts.add_argument(
    "--no-rdeps", action="store_true",
    help="Print packages with no reverse dependencies",
)
opts.add_argument(
    "startdirs", metavar="STARTDIR", nargs=argparse.REMAINDER,
    help="Prune graph to examine only these STARTDIRs",
)
opts = opts.parse_args()

ignored_deps = []
if opts.ignore_deps:
    for line in opts.ignore_deps.readlines():
        ignored_deps.append(line.strip().split())
    opts.ignore_deps.close()

if opts.chroot:
    cont = Container(opts.chroot)
else:
    cont = None

graph = generate_graph(ignored_deps, skip_check=opts.skip_check, cont=cont)
if graph is None:
    sys.exit(3)

if opts.quiet:
    if not graph.is_acyclic():
        sys.exit(2)

elif opts.no_deps:
    print("\n".join(graph.ind_nodes()))

elif opts.no_rdeps:
    print("\n".join(graph.all_leaves()))

elif opts.deps:
    print_list(opts.startdirs, graph.predecessors, "->")

elif opts.all_rdeps:
    print_list(opts.startdirs, graph.all_downstreams, "<*")

elif opts.rdeps:
    print_list(opts.startdirs, graph.downstream, "<-")

elif opts.build_order:
    if not graph.is_acyclic():
        sys.exit(2)
    tsort(opts, graph)

else:
    print_graph(opts.startdirs, graph, opts.graphviz)
    if not graph.is_acyclic():
        sys.exit(2)
